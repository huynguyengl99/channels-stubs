import asyncio
from re import Pattern
from typing import Any

from channels import DEFAULT_CHANNEL_LAYER

class ChannelLayerManager:
    backends: dict[str, Any]

    def __init__(self) -> None: ...
    def _reset_backends(self, setting: str, **kwargs: Any) -> None: ...
    @property
    def configs(self) -> dict[str, Any]: ...
    def make_backend(self, name: str) -> Any: ...
    def make_test_backend(self, name: str) -> Any: ...
    def _make_backend(self, name: str, config: dict[str, Any]) -> Any: ...
    def __getitem__(self, key: str) -> Any: ...
    def __contains__(self, key: str) -> bool: ...
    def set(self, key: str, layer: Any) -> Any | None: ...

class BaseChannelLayer:
    MAX_NAME_LENGTH: int = 100
    expiry: int
    capacity: int
    channel_capacity: dict[str, int]
    channel_name_regex: Pattern[str]
    group_name_regex: Pattern[str]
    invalid_name_error: str

    def __init__(
        self,
        expiry: int = 60,
        capacity: int = 100,
        channel_capacity: dict[str, int] | None = None,
    ) -> None: ...
    def compile_capacities(
        self, channel_capacity: dict[str, int]
    ) -> list[tuple[Pattern[str], int]]: ...
    def get_capacity(self, channel: str) -> int: ...
    def match_type_and_length(self, name: Any) -> bool: ...
    def require_valid_channel_name(self, name: str, receive: bool = False) -> bool: ...
    def require_valid_group_name(self, name: str) -> bool: ...
    def valid_channel_names(self, names: list[str], receive: bool = False) -> bool: ...
    def non_local_name(self, name: str) -> str: ...
    async def send(self, channel: str, message: dict[str, Any]) -> None: ...
    async def receive(self, channel: str) -> dict[str, Any]: ...
    async def new_channel(self) -> str: ...
    async def flush(self) -> None: ...
    async def group_add(self, group: str, channel: str) -> None: ...
    async def group_discard(self, group: str, channel: str) -> None: ...
    async def group_send(self, group: str, message: dict[str, Any]) -> None: ...
    def valid_channel_name(self, channel_name: str, receive: bool = False) -> bool: ...
    def valid_group_name(self, group_name: str) -> bool: ...

class InMemoryChannelLayer(BaseChannelLayer):
    channels: dict[str, asyncio.Queue]
    groups: dict[str, dict[str, float]]
    group_expiry: int

    def __init__(
        self,
        expiry: int = 60,
        group_expiry: int = 86400,
        capacity: int = 100,
        channel_capacity: dict[str, int] | None = None,
        **kwargs: Any,
    ) -> None: ...

    extensions: list[str]

    async def send(self, channel: str, message: dict[str, Any]) -> None: ...
    async def receive(self, channel: str) -> dict[str, Any]: ...
    async def new_channel(self, prefix: str = "specific.") -> str: ...
    def _clean_expired(self) -> None: ...
    async def flush(self) -> None: ...
    async def close(self) -> None: ...
    def _remove_from_groups(self, channel: str) -> None: ...
    async def group_add(self, group: str, channel: str) -> None: ...
    async def group_discard(self, group: str, channel: str) -> None: ...
    async def group_send(self, group: str, message: dict[str, Any]) -> None: ...

def get_channel_layer(
    alias: str = DEFAULT_CHANNEL_LAYER,
) -> BaseChannelLayer | None: ...

channel_layers: ChannelLayerManager
