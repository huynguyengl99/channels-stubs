from typing import Any, ClassVar

from channels.consumer import AsyncConsumer, SyncConsumer

class WebsocketConsumer(SyncConsumer):
    groups: ClassVar[list[str] | None]

    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def websocket_connect(self, message: dict[str, Any]) -> None: ...
    def connect(self) -> None: ...
    def accept(
        self,
        subprotocol: str | None = None,
        headers: list[tuple[str, str]] | None = None,
    ) -> None: ...
    def websocket_receive(self, message: dict[str, Any]) -> None: ...
    def receive(
        self, text_data: str | None = None, bytes_data: bytes | None = None
    ) -> None: ...
    def send(
        self,
        text_data: str | None = None,
        bytes_data: bytes | None = None,
        close: bool = False,
    ) -> None: ...
    def close(
        self, code: int | bool | None = None, reason: str | None = None
    ) -> None: ...
    def websocket_disconnect(self, message: dict[str, Any]) -> None: ...
    def disconnect(self, code: int) -> None: ...

class JsonWebsocketConsumer(WebsocketConsumer):
    def receive(
        self,
        text_data: str | None = None,
        bytes_data: bytes | None = None,
        **kwargs: Any,
    ) -> None: ...
    def receive_json(self, content: Any, **kwargs: Any) -> None: ...
    def send_json(self, content: Any, close: bool = False) -> None: ...
    @classmethod
    def decode_json(cls, text_data: str) -> Any: ...
    @classmethod
    def encode_json(cls, content: Any) -> str: ...

class AsyncWebsocketConsumer(AsyncConsumer):
    groups: ClassVar[list[str] | None]

    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    async def websocket_connect(self, message: dict[str, Any]) -> None: ...
    async def connect(self) -> None: ...
    async def accept(
        self,
        subprotocol: str | None = None,
        headers: list[tuple[str, str]] | None = None,
    ) -> None: ...
    async def websocket_receive(self, message: dict[str, Any]) -> None: ...
    async def receive(
        self, text_data: str | None = None, bytes_data: bytes | None = None
    ) -> None: ...
    async def send(
        self,
        text_data: str | None = None,
        bytes_data: bytes | None = None,
        close: bool = False,
    ) -> None: ...
    async def close(
        self, code: int | bool | None = None, reason: str | None = None
    ) -> None: ...
    async def websocket_disconnect(self, message: dict[str, Any]) -> None: ...
    async def disconnect(self, code: int) -> None: ...

class AsyncJsonWebsocketConsumer(AsyncWebsocketConsumer):
    async def receive(
        self,
        text_data: str | None = None,
        bytes_data: bytes | None = None,
        **kwargs: Any,
    ) -> None: ...
    async def receive_json(self, content: Any, **kwargs: Any) -> None: ...
    async def send_json(self, content: Any, close: bool = False) -> None: ...
    @classmethod
    async def decode_json(cls, text_data: str) -> Any: ...
    @classmethod
    async def encode_json(cls, content: Any) -> str: ...
